@page "/notification-admin"
@using NotificationTest.Common
@using NotificationTest.Services
@inject NotificationService NotificationService
@rendermode InteractiveServer

<PageTitle>알림 관리</PageTitle>

<div class="container mt-4">
    <h2>알림 메시지 관리</h2>

    <div class="row">
        <!-- 토스트 알림 전송 카드 -->
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5>토스트 알림 보내기</h5>
                </div>
                <div class="card-body">
                    <!-- 알림 전송 폼 -->
                    <EditForm Model="@notificationModel" OnValidSubmit="@SendNotification">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <!-- 제목 입력 -->
                        <div class="mb-3">
                            <label class="form-label">제목</label>
                            <InputText class="form-control" @bind-Value="notificationModel.Title" />
                        </div>

                        <!-- 메시지 입력 -->
                        <div class="mb-3">
                            <label class="form-label">메시지</label>
                            <InputTextArea class="form-control" rows="3" @bind-Value="notificationModel.Message" />
                        </div>

                        <!-- 알림 타입 선택 -->
                        <div class="mb-3">
                            <label class="form-label">타입</label>
                            <InputSelect class="form-select" @bind-Value="notificationModel.Type">
                                <option value="info">정보</option>
                                <option value="success">성공</option>
                                <option value="warning">경고</option>
                                <option value="error">오류</option>
                            </InputSelect>
                        </div>

                        <!-- 대상 선택 -->
                        <div class="mb-3">
                            <label class="form-label">대상</label>
                            <InputSelect class="form-select" @bind-Value="notificationModel.Target">
                                <option value="all">모든 사용자</option>
                                <option value="user">특정 사용자</option>
                                <option value="group">특정 그룹</option>
                            </InputSelect>
                        </div>

                        <!-- 대상이 all이 아닐 때 추가 입력란 표시 -->
                        @if (notificationModel.Target != "all")
                        {
                            <div class="mb-3">
                                <label class="form-label">@(notificationModel.Target == "user" ? "사용자 ID" : "그룹명")</label>
                                <InputText class="form-control" @bind-Value="notificationModel.TargetId" />
                            </div>
                        }

                        <button type="submit" class="btn btn-primary">알림 보내기</button>
                    </EditForm>
                </div>
            </div>
        </div>

        <!-- 팝업 알림 전송 카드 -->
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5>팝업 메시지 보내기</h5>
                </div>
                <div class="card-body">
                    <!-- 팝업 전송 폼 -->
                    <EditForm Model="@popupModel" OnValidSubmit="@SendPopup">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <!-- 제목 입력 -->
                        <div class="mb-3">
                            <label class="form-label">제목</label>
                            <InputText class="form-control" @bind-Value="popupModel.Title" />
                        </div>

                        <!-- 메시지 입력 -->
                        <div class="mb-3">
                            <label class="form-label">메시지</label>
                            <InputTextArea class="form-control" rows="3" @bind-Value="popupModel.Message" />
                        </div>

                        <!-- 팝업 타입 선택 -->
                        <div class="mb-3">
                            <label class="form-label">타입</label>
                            <InputSelect class="form-select" @bind-Value="popupModel.Type">
                                <option value="info">정보</option>
                                <option value="success">성공</option>
                                <option value="warning">경고</option>
                                <option value="error">오류</option>
                            </InputSelect>
                        </div>

                        <!-- 대상 선택 -->
                        <div class="mb-3">
                            <label class="form-label">대상</label>
                            <InputSelect class="form-select" @bind-Value="popupModel.Target">
                                <option value="all">모든 사용자</option>
                                <option value="user">특정 사용자</option>
                            </InputSelect>
                        </div>

                        <!-- 대상이 user일 때만 사용자 ID 입력란 표시 -->
                        @if (popupModel.Target == "user")
                        {
                            <div class="mb-3">
                                <label class="form-label">사용자 ID</label>
                                <InputText class="form-control" @bind-Value="popupModel.TargetId" />
                            </div>
                        }

                        <button type="submit" class="btn btn-warning">팝업 보내기</button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>

    <!-- 빠른 테스트 버튼 그룹 -->
    <div class="row mt-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5>빠른 테스트</h5>
                </div>
                <div class="card-body">
                    <div class="btn-group" role="group">
                        <!-- 각 버튼 클릭 시 미리 정의된 알림/팝업 전송 -->
                        <button class="btn btn-outline-primary" @onclick="SendInfoNotification">
                            정보 알림
                        </button>
                        <button class="btn btn-outline-success" @onclick="SendSuccessNotification">
                            성공 알림
                        </button>
                        <button class="btn btn-outline-warning" @onclick="SendWarningNotification">
                            경고 알림
                        </button>
                        <button class="btn btn-outline-danger" @onclick="SendErrorNotification">
                            오류 알림
                        </button>
                        <button class="btn btn-outline-secondary" @onclick="SendQuickPopup">
                            테스트 팝업
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    // 토스트 알림 폼 모델
    private NotificationModel notificationModel = new();
    // 팝업 알림 폼 모델
    private PopupModel popupModel = new();

    /// <summary>
    /// 토스트 알림 전송 처리
    /// </summary>
    private async Task SendNotification()
    {
        try
        {
            // 대상에 따라 분기하여 알림 전송
            switch (notificationModel.Target)
            {
                case "all":
                    // 모든 사용자에게 알림
                    await NotificationService.SendNotificationToAll(
                        notificationModel.Title,
                        notificationModel.Message,
                        notificationModel.Type);
                    break;
                case "user":
                    // 특정 사용자에게 알림
                    await NotificationService.SendNotificationToUser(
                        notificationModel.TargetId,
                        notificationModel.Title,
                        notificationModel.Message,
                        notificationModel.Type);
                    break;
                case "group":
                    // 특정 그룹에게 알림
                    await NotificationService.SendNotificationToGroup(
                        notificationModel.TargetId,
                        notificationModel.Title,
                        notificationModel.Message,
                        notificationModel.Type);
                    break;
            }

            // 폼 입력값 초기화
            notificationModel = new();
        }
        catch (Exception ex)
        {
            // 오류 발생 시 콘솔에 메시지 출력
            Console.WriteLine($"알림 전송 오류: {ex.Message}");
        }
    }

    /// <summary>
    /// 팝업 알림 전송 처리
    /// </summary>
    private async Task SendPopup()
    {
        try
        {
            // 대상에 따라 분기하여 팝업 전송
            switch (popupModel.Target)
            {
                case "all":
                    // 모든 사용자에게 팝업
                    await NotificationService.SendPopupToAll(
                        popupModel.Title,
                        popupModel.Message,
                        popupModel.Type);
                    break;
                case "user":
                    // 특정 사용자에게 팝업
                    await NotificationService.SendPopupToUser(
                        popupModel.TargetId,
                        popupModel.Title,
                        popupModel.Message,
                        popupModel.Type);
                    break;
            }

            // 폼 입력값 초기화
            popupModel = new();
        }
        catch (Exception ex)
        {
            // 오류 발생 시 콘솔에 메시지 출력
            Console.WriteLine($"팝업 전송 오류: {ex.Message}");
        }
    }

    /// <summary>
    /// 빠른 정보 알림 전송
    /// </summary>
    private async Task SendInfoNotification()
    {
        await SendQuickNotification("info");
    }

    /// <summary>
    /// 빠른 성공 알림 전송
    /// </summary>
    private async Task SendSuccessNotification()
    {
        await SendQuickNotification("success");
    }

    /// <summary>
    /// 빠른 경고 알림 전송
    /// </summary>
    private async Task SendWarningNotification()
    {
        await SendQuickNotification("warning");
    }

    /// <summary>
    /// 빠른 오류 알림 전송
    /// </summary>
    private async Task SendErrorNotification()
    {
        await SendQuickNotification("error");
    }

    /// <summary>
    /// 타입별 빠른 알림 전송
    /// </summary>
    private async Task SendQuickNotification(string type)
    {
        // 타입별 제목/메시지 사전 정의
        var titles = new Dictionary<string, string>
            {
                ["info"] = "정보",
                ["success"] = "성공",
                ["warning"] = "경고",
                ["error"] = "오류"
            };

        var messages = new Dictionary<string, string>
            {
                ["info"] = "이것은 정보 알림입니다.",
                ["success"] = "작업이 성공적으로 완료되었습니다.",
                ["warning"] = "주의가 필요한 상황입니다.",
                ["error"] = "오류가 발생했습니다."
            };

        try
        {
            // 전송 시작 로그
            Console.WriteLine($"알림 전송 시작: {type}");
            // 모든 사용자에게 알림 전송
            await NotificationService.SendNotificationToAll(titles[type], messages[type], type);
            // 전송 완료 로그
            Console.WriteLine($"알림 전송 완료: {type}");
        }
        catch (Exception ex)
        {
            // 오류 발생 시 콘솔에 메시지 출력
            Console.WriteLine($"알림 전송 오류: {ex.Message}");
        }
    }

    /// <summary>
    /// 빠른 테스트 팝업 전송
    /// </summary>
    private async Task SendQuickPopup()
    {
        await NotificationService.SendPopupToAll("테스트 팝업", "이것은 테스트 팝업 메시지입니다.", "info");
    }
}